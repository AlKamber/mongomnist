Git Cheatsheet

Setup and Configuration
git config --global user.name "Your Name"
git config --global user.email "your.email@example.com"

Repository Setup
git init                   # Initialize a new local repository
git clone <url>            # Clone a repository

Basic Snapshotting
git status                 # Check status
git add <file>             # Add a file to staging area
git add .                  # Add all new and changed files to staging area
git commit -m "message"    # Commit changes
git rm <file>              # Remove a file from version control

Branching and Merging
git branch                 # List branches (the asterisk denotes the current branch)
git branch <branch-name>   # Create a new branch
git checkout <branch-name> # Switch to a branch
git checkout -b <branch-name> # Create a new branch and switch to it
git merge <branch>         # Merge a branch into the active branch
git branch -d <branch-name> # Delete a branch

Sharing and Updating
git push origin <branch>   # Push a branch to your remote repository
git pull                   # Update local repository to the newest commit
git fetch                  # Get latest changes from origin (don't merge)

Inspection and Comparison
git log                    # View commit history
git log --oneline          # View commit history (compact)
git diff <source-branch> <target-branch> # Preview changes before merging

Undoing Changes
git reset <file>           # Unstage a file while retaining the changes
git reset --hard HEAD      # Discard all local changes in your working directory
git revert <commit>        # Create new commit that undoes all of the changes made in <commit>, then apply it to the current branch

Stashing
git stash                  # Stash changes in a dirty working directory
git stash pop              # Remove a single stashed state from the stash list and apply it on top of the current working tree state

Remote Repositories
git remote add origin <url> # Add a remote repository
git remote -v              # List all currently configured remote repositories

Tags
git tag <tag-name>         # Create a new tag
git tag -a <tag-name> -m "tag message" # Create an annotated tag
git push --tags            # Push all tags to remote repository

Advanced
git rebase <branch>        # Rebase your current HEAD onto <branch>
git cherry-pick <commit>   # Apply the changes introduced by some existing commits